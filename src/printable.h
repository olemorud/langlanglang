
#pragma once

#ifdef GENERATE_TABLE
/*
 Generates table below:
    cc -DGENERATE_TABLE -xc printable.h -o generate_table \
        && ./generate_table >> printable.h
 */
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

static int escape(int c) {
    return c == '"' || c == '\\';
}

int main() {
#define MAX_LINE_WIDTH 80
#define BUF_SZ 16
#define NULL_STR "\"<NULL>\", "
#define TAB "    "
#define printf_assert(...) assert( printf(__VA_ARGS__) > 0)
    int written = 0;
    char buf[BUF_SZ];
    char* fmt;

    printf_assert(
        "\n// generated by main() in printable.h\n"
        "\nstatic const char * asdasd_printable[256] = {"
        "\n" TAB NULL_STR
    );

    int line_len = sizeof(TAB) + sizeof(NULL_STR) - 1;
    for (int c = 1; c < 255; c++) {
        if (isprint(c) && escape(c)) {
            fmt = "\"\\%c\", ";
        } else if (isprint(c)) {
            fmt = "\"%c\", ";
        } else {
            fmt = "\"<%02x>\", ";
        }

        written = snprintf(buf, BUF_SZ, fmt, c);
        assert( written > 0 && written < BUF_SZ );
        line_len += written;

        if (line_len > MAX_LINE_WIDTH) {
            printf_assert("\n" TAB);
            line_len = sizeof(TAB) + written - 1;
        }

        printf_assert(buf);
    }
    printf_assert("\"<EOF>\"\n\n};");
    return EXIT_SUCCESS;
}
#endif

#define PRINTABLE(ch) asdasd_printable[(unsigned char)(ch)]

// generated by main() in printable.h

static const char * asdasd_printable[] = {
    "<NULL>", "<01>", "<02>", "<03>", "<04>", "<05>", "<06>", "<07>", "<08>", 
    "<09>", "<0a>", "<0b>", "<0c>", "<0d>", "<0e>", "<0f>", "<10>", "<11>", 
    "<12>", "<13>", "<14>", "<15>", "<16>", "<17>", "<18>", "<19>", "<1a>", 
    "<1b>", "<1c>", "<1d>", "<1e>", "<1f>", " ", "!", "\"", "#", "$", "%", "&", 
    "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", 
    "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", 
    "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
    "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", 
    "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", 
    "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "<7f>", 
    "<80>", "<81>", "<82>", "<83>", "<84>", "<85>", "<86>", "<87>", "<88>", 
    "<89>", "<8a>", "<8b>", "<8c>", "<8d>", "<8e>", "<8f>", "<90>", "<91>", 
    "<92>", "<93>", "<94>", "<95>", "<96>", "<97>", "<98>", "<99>", "<9a>", 
    "<9b>", "<9c>", "<9d>", "<9e>", "<9f>", "<a0>", "<a1>", "<a2>", "<a3>", 
    "<a4>", "<a5>", "<a6>", "<a7>", "<a8>", "<a9>", "<aa>", "<ab>", "<ac>", 
    "<ad>", "<ae>", "<af>", "<b0>", "<b1>", "<b2>", "<b3>", "<b4>", "<b5>", 
    "<b6>", "<b7>", "<b8>", "<b9>", "<ba>", "<bb>", "<bc>", "<bd>", "<be>", 
    "<bf>", "<c0>", "<c1>", "<c2>", "<c3>", "<c4>", "<c5>", "<c6>", "<c7>", 
    "<c8>", "<c9>", "<ca>", "<cb>", "<cc>", "<cd>", "<ce>", "<cf>", "<d0>", 
    "<d1>", "<d2>", "<d3>", "<d4>", "<d5>", "<d6>", "<d7>", "<d8>", "<d9>", 
    "<da>", "<db>", "<dc>", "<dd>", "<de>", "<df>", "<e0>", "<e1>", "<e2>", 
    "<e3>", "<e4>", "<e5>", "<e6>", "<e7>", "<e8>", "<e9>", "<ea>", "<eb>", 
    "<ec>", "<ed>", "<ee>", "<ef>", "<f0>", "<f1>", "<f2>", "<f3>", "<f4>", 
    "<f5>", "<f6>", "<f7>", "<f8>", "<f9>", "<fa>", "<fb>", "<fc>", "<fd>", 
    "<fe>", "<EOF>"
};
